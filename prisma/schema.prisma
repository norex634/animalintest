// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//compagnie
model Horaire {
  id   Int      @id @default(autoincrement())
  jour String   @db.VarChar(255)
  h1   DateTime @default(now()) @db.Timestamp(0)
  h2   DateTime @default(now()) @db.Timestamp(0)
  compagnieId Int?
  compagnie    Compagnie? @relation(fields: [compagnieId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Social {
  id   Int    @id @default(autoincrement())
  nom  String @db.VarChar(255)
  link String @db.VarChar(255)
  compagnieId Int?
  compagnie    Compagnie? @relation(fields: [compagnieId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Compagnie {
  id     Int    @id @default(autoincrement())
  nom    String @db.VarChar(255)
  logo   String? @db.VarChar(255)
  slogan String? @db.VarChar(255)
  tel    String @db.VarChar(255)
  lieu   String @db.VarChar(255)
  email  String @db.VarChar(255)
  horaire Horaire[]
  social  Social[]
}

//faq
model Faq {
  id       Int     @id @default(autoincrement())
  question String  @db.VarChar(255)
  reponse  String  @db.Text
  link     String? @db.VarChar(255)
}

// Actu
model CategorieActu {
  id  Int    @id @default(autoincrement())
  slug String @unique @db.VarChar(100)
  nom String @db.VarChar(255)
  img String? @db.VarChar(255)
  actu Actu[]
}

model Actu {
  id    Int      @id @default(autoincrement())
  slug String @unique @db.VarChar(100)
  titre String   @db.VarChar(255)
  descr String?   @db.Text
  date  DateTime @default(now()) @db.Timestamp(0)
  categorieId Int
  categorie CategorieActu @relation(fields:[categorieId], references: [id], onDelete: NoAction)
}

// animal 
model Race {
  id  Int    @id @default(autoincrement())
  nom String @db.VarChar(255)
  animal Animal[]
}

model Sexe {
  id  Int    @id @default(autoincrement())
  nom String @db.VarChar(255)
  animal Animal[]
}

model CategorieAnimal {
  id  Int    @id @default(autoincrement())
  slug String @unique @db.VarChar(100)
  nom String @db.VarChar(255)
  img String? @db.VarChar(255)
  animal Animal[]
}

model Images {
  id  Int    @id @default(autoincrement())
  nom String? @db.VarChar(255)
  img String @db.VarChar(255)
  publicId String? @db.VarChar(255)
  animalId Int
  animal        Animal      @relation(fields: [animalId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Animal {
  id         Int      @id @default(autoincrement())
  raceId     Int?
  sexeId     Int
  categorieId Int
  slug String @unique @db.VarChar(100)
  nom        String   @db.VarChar(255)
  naissance  DateTime @default(now()) @db.Timestamp(0)
  dateArrive DateTime @default(now()) @db.Timestamp(0)
  descrShort String   @db.VarChar(255)
  descr      String   @db.Text
  categorie   CategorieAnimal? @relation(fields: [categorieId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sexe        Sexe?      @relation(fields: [sexeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  race        Race?      @relation(fields: [raceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  image Images[]
}


//user
model User {
  id       Int    @id @default(autoincrement())
  nom      String @db.VarChar(255)
  prenom   String @db.VarChar(255)
  image    String @db.VarChar(255)
  email    String @unique(map: "email")
  password String 
  role     Role   @default(USER)
}

enum Role {
  USER
  ADMIN
}